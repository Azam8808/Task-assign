{"ast":null,"code":"const isValidEmail = email => {\n  return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\nexport const validate = (group, name, value) => {\n  if (group === \"signup\") {\n    switch (name) {\n      case \"name\":\n        {\n          if (!value) return \"This field is required\";\n          return null;\n        }\n      case \"email\":\n        {\n          if (!value) return \"This field is required\";\n          if (!isValidEmail(value)) return \"Please enter valid email address\";\n          return null;\n        }\n      case \"password\":\n        {\n          if (!value) return \"This field is required\";\n          if (value.length < 4) return \"Password should be atleast 4 chars long\";\n          return null;\n        }\n      default:\n        return null;\n    }\n  } else if (group === \"login\") {\n    switch (name) {\n      case \"email\":\n        {\n          if (!value) return \"This field is required\";\n          if (!isValidEmail(value)) return \"Please enter valid email address\";\n          return null;\n        }\n      case \"password\":\n        {\n          if (!value) return \"This field is required\";\n          return null;\n        }\n      default:\n        return null;\n    }\n  } else if (group === \"task\") {\n    switch (name) {\n      case \"description\":\n        {\n          if (!value) return \"This field is required\";\n          if (value.length > 100) return \"Max. limit is 100 characters.\";\n          return null;\n        }\n      default:\n        return null;\n    }\n  } else {\n    return null;\n  }\n};\nconst validateManyFields = (group, list) => {\n  const errors = [];\n  for (const field in list) {\n    const err = validate(group, field, list[field]);\n    if (err) errors.push({\n      field,\n      err\n    });\n  }\n  return errors;\n};\nexport default validateManyFields;","map":{"version":3,"names":["isValidEmail","email","String","toLowerCase","match","validate","group","name","value","length","validateManyFields","list","errors","field","err","push"],"sources":["C:/Users/azamk/OneDrive/Desktop/assignment/MERN-task-manager/frontend/src/validations/index.js"],"sourcesContent":["const isValidEmail = (email) => {\r\n  return String(email)\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport const validate = (group, name, value) => {\r\n\r\n  if (group === \"signup\") {\r\n    switch (name) {\r\n      case \"name\": {\r\n        if (!value) return \"This field is required\";\r\n        return null;\r\n      }\r\n      case \"email\": {\r\n        if (!value) return \"This field is required\";\r\n        if (!isValidEmail(value)) return \"Please enter valid email address\";\r\n        return null;\r\n      }\r\n      case \"password\": {\r\n        if (!value) return \"This field is required\";\r\n        if (value.length < 4) return \"Password should be atleast 4 chars long\";\r\n        return null;\r\n      }\r\n      default: return null;\r\n    }\r\n  }\r\n\r\n  else if (group === \"login\") {\r\n    switch (name) {\r\n      case \"email\": {\r\n        if (!value) return \"This field is required\";\r\n        if (!isValidEmail(value)) return \"Please enter valid email address\";\r\n        return null;\r\n      }\r\n      case \"password\": {\r\n        if (!value) return \"This field is required\";\r\n        return null;\r\n      }\r\n      default: return null;\r\n    }\r\n  }\r\n  else if (group === \"task\") {\r\n    switch (name) {\r\n      case \"description\": {\r\n        if (!value) return \"This field is required\";\r\n        if (value.length > 100) return \"Max. limit is 100 characters.\";\r\n        return null;\r\n      }\r\n      default: return null;\r\n    }\r\n  }\r\n\r\n  else {\r\n    return null;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst validateManyFields = (group, list) => {\r\n  const errors = [];\r\n  for (const field in list) {\r\n    const err = validate(group, field, list[field]);\r\n    if (err) errors.push({ field, err });\r\n  }\r\n  return errors;\r\n}\r\nexport default validateManyFields;"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,KAAK,IAAK;EAC9B,OAAOC,MAAM,CAACD,KAAK,CAAC,CACjBE,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,uJACF,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,KAAK;EAE9C,IAAIF,KAAK,KAAK,QAAQ,EAAE;IACtB,QAAQC,IAAI;MACV,KAAK,MAAM;QAAE;UACX,IAAI,CAACC,KAAK,EAAE,OAAO,wBAAwB;UAC3C,OAAO,IAAI;QACb;MACA,KAAK,OAAO;QAAE;UACZ,IAAI,CAACA,KAAK,EAAE,OAAO,wBAAwB;UAC3C,IAAI,CAACR,YAAY,CAACQ,KAAK,CAAC,EAAE,OAAO,kCAAkC;UACnE,OAAO,IAAI;QACb;MACA,KAAK,UAAU;QAAE;UACf,IAAI,CAACA,KAAK,EAAE,OAAO,wBAAwB;UAC3C,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,yCAAyC;UACtE,OAAO,IAAI;QACb;MACA;QAAS,OAAO,IAAI;IACtB;EACF,CAAC,MAEI,IAAIH,KAAK,KAAK,OAAO,EAAE;IAC1B,QAAQC,IAAI;MACV,KAAK,OAAO;QAAE;UACZ,IAAI,CAACC,KAAK,EAAE,OAAO,wBAAwB;UAC3C,IAAI,CAACR,YAAY,CAACQ,KAAK,CAAC,EAAE,OAAO,kCAAkC;UACnE,OAAO,IAAI;QACb;MACA,KAAK,UAAU;QAAE;UACf,IAAI,CAACA,KAAK,EAAE,OAAO,wBAAwB;UAC3C,OAAO,IAAI;QACb;MACA;QAAS,OAAO,IAAI;IACtB;EACF,CAAC,MACI,IAAIF,KAAK,KAAK,MAAM,EAAE;IACzB,QAAQC,IAAI;MACV,KAAK,aAAa;QAAE;UAClB,IAAI,CAACC,KAAK,EAAE,OAAO,wBAAwB;UAC3C,IAAIA,KAAK,CAACC,MAAM,GAAG,GAAG,EAAE,OAAO,+BAA+B;UAC9D,OAAO,IAAI;QACb;MACA;QAAS,OAAO,IAAI;IACtB;EACF,CAAC,MAEI;IACH,OAAO,IAAI;EACb;AAEF,CAAC;AAGD,MAAMC,kBAAkB,GAAGA,CAACJ,KAAK,EAAEK,IAAI,KAAK;EAC1C,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,MAAMC,KAAK,IAAIF,IAAI,EAAE;IACxB,MAAMG,GAAG,GAAGT,QAAQ,CAACC,KAAK,EAAEO,KAAK,EAAEF,IAAI,CAACE,KAAK,CAAC,CAAC;IAC/C,IAAIC,GAAG,EAAEF,MAAM,CAACG,IAAI,CAAC;MAAEF,KAAK;MAAEC;IAAI,CAAC,CAAC;EACtC;EACA,OAAOF,MAAM;AACf,CAAC;AACD,eAAeF,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}